/* 
 * The MIT License
 *
 * Copyright 2016 Viktor Radzivilo.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.vrsl.jet.modeller.erd.editor.schema.dialogs;

import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.table.DefaultTableModel;
import org.openide.windows.WindowManager;
import org.vrsl.jet.modeller.erd.editor.schema.view.elements.Entity;
import org.vrsl.jet.modeller.erd.editor.schema.view.elements.EntityProperty;

@SuppressWarnings({"unchecked", "rawtypes", "deprecation"})
public class EntitiyPropertiesDialog extends javax.swing.JDialog {

    private boolean updated = false;
    private Entity entity;
    private DefaultListModel fieldsListModel = null;
    private DefaultTableModel mappingModel = null;
    private DefaultTableModel detailsModel = null;
    private boolean isMappingTableUpdeted = false;
    private boolean isDetailsTableUpdated = false;
    // -- Reference data for SQL types and est. --------------------------------
    private static final String[] fieldTypes = {
        "UNDEFINED",
        "boolean", // BOOLEAN=1;
        "char", // CHAR=2;       
        "byte", // BYTE=3;
        "short", // SHORT=4;
        "integer", // INTEGER=5;
        "long", // LONG=6;
        "String", // STRING=7;
        "float", // FLOAT=8;
        "double", // DOUBLE=9;
        "Date" // DATE=10;
    };
    String[] sqlSize = {
        null,
        "1", // BOOLEAN=1;
        "1", // CHAR=2;       
        "3", // BYTE=3;
        "5", // SHORT=4;
        "10", // INTEGER=5;
        "19", // LONG=6;
        "2000", // STRING=7;
        "12", // FLOAT=8;
        "12", // DOUBLE=9;
        null, // DATE=10;
    };
    String[] sqlPrec = {
        null,
        null, // BOOLEAN=1;
        null, // CHAR=2;       
        null, // BYTE=3;
        null, // SHORT=4;
        null, // INTEGER=5;
        null, // LONG=6;
        null, // STRING=7;
        "0", // FLOAT=8;
        "0", // DOUBLE=9;
        null, // DATE=10;
    };

    /**
     * Creates new form EntitiyPropertiesDialog
     */
    public EntitiyPropertiesDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        String title = WindowManager.getDefault().getMainWindow().getTitle();
        setTitle(title);
        setCenter();
    }

    private void setCenter() {
        java.awt.Rectangle screenRect = this.getGraphicsConfiguration().getBounds();
        this.setLocation(
                screenRect.x + screenRect.width / 2 - this.getSize().width / 2,
                screenRect.y + screenRect.height / 2 - this.getSize().height / 2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jAcceptButton = new javax.swing.JButton();
        jCancelButton = new javax.swing.JButton();
        jHelpButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jNameTextField = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jDescriptionTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jMappingTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jDetailsTable = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jOrderList = new javax.swing.JList();
        jMoveUpButton = new javax.swing.JButton();
        jMoveDownButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(EntitiyPropertiesDialog.class, "EntitiyPropertiesDialog.title")); // NOI18N
        setMinimumSize(new java.awt.Dimension(230, 345));
        setPreferredSize(new java.awt.Dimension(595, 345));
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setMaximumSize(new java.awt.Dimension(230, 32767));
        jPanel1.setPreferredSize(new java.awt.Dimension(230, 100));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/vrsl/jet/modeller/erd/images/DialogTitleEntityDetails.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(EntitiyPropertiesDialog.class, "EntitiyPropertiesDialog.jLabel2.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setMaximumSize(new java.awt.Dimension(230, 32767));
        jPanel2.setMinimumSize(new java.awt.Dimension(230, 35));
        jPanel2.setPreferredSize(new java.awt.Dimension(230, 35));

        org.openide.awt.Mnemonics.setLocalizedText(jAcceptButton, org.openide.util.NbBundle.getMessage(EntitiyPropertiesDialog.class, "EntitiyPropertiesDialog.jAcceptButton.text")); // NOI18N
        jAcceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAcceptButtonActionPerformed(evt);
            }
        });
        jPanel2.add(jAcceptButton);

        org.openide.awt.Mnemonics.setLocalizedText(jCancelButton, org.openide.util.NbBundle.getMessage(EntitiyPropertiesDialog.class, "EntitiyPropertiesDialog.jCancelButton.text")); // NOI18N
        jCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCancelButtonActionPerformed(evt);
            }
        });
        jPanel2.add(jCancelButton);

        org.openide.awt.Mnemonics.setLocalizedText(jHelpButton, org.openide.util.NbBundle.getMessage(EntitiyPropertiesDialog.class, "EntitiyPropertiesDialog.jHelpButton.text")); // NOI18N
        jPanel2.add(jHelpButton);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setMaximumSize(new java.awt.Dimension(230, 210));
        jPanel3.setMinimumSize(new java.awt.Dimension(230, 210));
        jPanel3.setPreferredSize(new java.awt.Dimension(230, 210));
        jPanel3.setRequestFocusEnabled(false);
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setMaximumSize(new java.awt.Dimension(230, 32));
        jPanel4.setMinimumSize(new java.awt.Dimension(230, 32));
        jPanel4.setPreferredSize(new java.awt.Dimension(230, 32));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(EntitiyPropertiesDialog.class, "EntitiyPropertiesDialog.jLabel1.text")); // NOI18N
        jPanel4.add(jLabel1);

        jNameTextField.setText(org.openide.util.NbBundle.getMessage(EntitiyPropertiesDialog.class, "EntitiyPropertiesDialog.jNameTextField.text")); // NOI18N
        jNameTextField.setPreferredSize(new java.awt.Dimension(300, 27));
        jPanel4.add(jNameTextField);

        jPanel3.add(jPanel4, java.awt.BorderLayout.PAGE_START);

        jTabbedPane1.setMinimumSize(new java.awt.Dimension(230, 210));
        jTabbedPane1.setName("Description"); // NOI18N
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(230, 210));

        jScrollPane1.setPreferredSize(new java.awt.Dimension(230, 148));

        jDescriptionTextArea.setColumns(20);
        jDescriptionTextArea.setRows(5);
        jScrollPane1.setViewportView(jDescriptionTextArea);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(EntitiyPropertiesDialog.class, "EntitiyPropertiesDialog.jScrollPane1.TabConstraints.tabTitle"), jScrollPane1); // NOI18N

        jScrollPane2.setPreferredSize(new java.awt.Dimension(230, 402));

        jMappingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jMappingTable);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(EntitiyPropertiesDialog.class, "EntitiyPropertiesDialog.jScrollPane2.TabConstraints.tabTitle"), jScrollPane2); // NOI18N

        jScrollPane3.setPreferredSize(new java.awt.Dimension(230, 402));

        jDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jDetailsTable);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(EntitiyPropertiesDialog.class, "EntitiyPropertiesDialog.jScrollPane3.TabConstraints.tabTitle"), jScrollPane3); // NOI18N

        jPanel5.setMinimumSize(new java.awt.Dimension(230, 210));
        jPanel5.setPreferredSize(new java.awt.Dimension(230, 110));
        java.awt.GridBagLayout jPanel5Layout = new java.awt.GridBagLayout();
        jPanel5Layout.columnWidths = new int[] {0, 6, 0};
        jPanel5Layout.rowHeights = new int[] {0, 3, 0, 3, 0};
        jPanel5.setLayout(jPanel5Layout);

        jScrollPane4.setPreferredSize(new java.awt.Dimension(340, 40));

        jOrderList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jOrderList.setMaximumSize(new java.awt.Dimension(240, 90));
        jOrderList.setMinimumSize(new java.awt.Dimension(200, 30));
        jOrderList.setPreferredSize(new java.awt.Dimension(210, 30));
        jScrollPane4.setViewportView(jOrderList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel5.add(jScrollPane4, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jMoveUpButton, org.openide.util.NbBundle.getMessage(EntitiyPropertiesDialog.class, "EntitiyPropertiesDialog.jMoveUpButton.text")); // NOI18N
        jMoveUpButton.setLabel(org.openide.util.NbBundle.getMessage(EntitiyPropertiesDialog.class, "EntitiyPropertiesDialog.jMoveUpButton.label")); // NOI18N
        jMoveUpButton.setMaximumSize(new java.awt.Dimension(95, 29));
        jMoveUpButton.setMinimumSize(new java.awt.Dimension(95, 29));
        jMoveUpButton.setPreferredSize(new java.awt.Dimension(95, 29));
        jMoveUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMoveUpButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        jPanel5.add(jMoveUpButton, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jMoveDownButton, org.openide.util.NbBundle.getMessage(EntitiyPropertiesDialog.class, "EntitiyPropertiesDialog.jMoveDownButton.text")); // NOI18N
        jMoveDownButton.setLabel(org.openide.util.NbBundle.getMessage(EntitiyPropertiesDialog.class, "EntitiyPropertiesDialog.jMoveDownButton.label")); // NOI18N
        jMoveDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMoveDownButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 4);
        jPanel5.add(jMoveDownButton, gridBagConstraints);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(EntitiyPropertiesDialog.class, "EntitiyPropertiesDialog.jPanel5.TabConstraints.tabTitle"), jPanel5); // NOI18N

        jPanel3.add(jTabbedPane1, java.awt.BorderLayout.CENTER);
        jTabbedPane1.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(EntitiyPropertiesDialog.class, "EntitiyPropertiesDialog.Description.AccessibleContext.accessibleName")); // NOI18N

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jAcceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAcceptButtonActionPerformed
        applayUpdates();
        updated = true;
        dispose();
    }//GEN-LAST:event_jAcceptButtonActionPerformed

    private void jCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_jCancelButtonActionPerformed

    private void jMoveUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMoveUpButtonActionPerformed
        int selInd = jOrderList.getSelectedIndex();
        if (entity.upField(selInd)) {
            Object curObj = fieldsListModel.get(selInd);
            Object prwObj = fieldsListModel.get(selInd - 1);
            fieldsListModel.setElementAt(curObj, selInd - 1);
            fieldsListModel.setElementAt(prwObj, selInd);
            jOrderList.setSelectedIndex(selInd - 1);

            jCancelButton.setEnabled(false);
        }

    }//GEN-LAST:event_jMoveUpButtonActionPerformed

    private void jMoveDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMoveDownButtonActionPerformed
        int selInd = jOrderList.getSelectedIndex();
        if (entity.downField(selInd)) {
            Object curObj = fieldsListModel.get(selInd);
            Object nxtObj = fieldsListModel.get(selInd + 1);
            fieldsListModel.setElementAt(curObj, selInd + 1);
            fieldsListModel.setElementAt(nxtObj, selInd);
            jOrderList.setSelectedIndex(selInd + 1);

            jCancelButton.setEnabled(false);
        }
    }//GEN-LAST:event_jMoveDownButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jAcceptButton;
    private javax.swing.JButton jCancelButton;
    private javax.swing.JTextArea jDescriptionTextArea;
    private javax.swing.JTable jDetailsTable;
    private javax.swing.JButton jHelpButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTable jMappingTable;
    private javax.swing.JButton jMoveDownButton;
    private javax.swing.JButton jMoveUpButton;
    private javax.swing.JTextField jNameTextField;
    private javax.swing.JList jOrderList;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the entity
     */
    public Entity getEntitiy() {
        return entity;
    }

    /**
     * @param entitiy the entity to set
     */
    public void setEntitiy(Entity entity) {
        this.entity = entity;
        jNameTextField.setText(entity.getName());
        jDescriptionTextArea.setText(entity.getDescription());
        initMappingTable(entity.getAllFields());
        initDetailsTable(entity.getAllFields());
        initPropertiesOrderList(entity.getAllFields());
    }

    private void initMappingTable(List<EntityProperty> fl) {

        Object[][] data = new Object[fl.size()][5];
        for (int i = 0; i < fl.size(); i++) {
            data[i][0] = fl.get(i).getName();
            data[i][2] = fieldTypes[fl.get(i).getType()];
            if (fl.get(i).getMapFieldTo() == null) {
                data[i][1] = fl.get(i).getName();
                data[i][3] = sqlSize[fl.get(i).getType()];
                data[i][4] = sqlPrec[fl.get(i).getType()];
            } else {
                data[i][1] = fl.get(i).getMapFieldTo();
                if (fl.get(i).getMapFieldSize() > 0) {
                    data[i][3] = "" + fl.get(i).getMapFieldSize();
                } else {
                    data[i][3] = sqlSize[fl.get(i).getType()];
                }
                if (sqlPrec[fl.get(i).getType()] != null && fl.get(i).getMapFieldPrec() >= 0) {
                    data[i][4] = "" + fl.get(i).getMapFieldPrec();
                } else {
                    data[i][4] = sqlPrec[fl.get(i).getType()];
                }
            }
        }

        jMappingTable.setModel(mappingModel = new javax.swing.table.DefaultTableModel(
                data,
                new String[]{
                    "Object field", "DB field", "Type", "Size", "Prec"
                }) {
                    static final long serialVersionUID = 240000007;

                    @Override
                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        if (columnIndex == 0 || columnIndex == 2) {
                            return false;
                        }
                        return getValueAt(rowIndex, columnIndex) != null;
                    }

                    @Override
                    public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
                        super.setValueAt(aValue, rowIndex, columnIndex);
                        isMappingTableUpdeted = true;
                    }
                });
    }

    private void initDetailsTable(List<EntityProperty> fl) {
        Object[][] tran = new Object[fl.size()][2];

        for (int i = 0; i < fl.size(); i++) {
            tran[i][0] = fl.get(i).getName();
            tran[i][1] = fl.get(i).getDescription();
        }
        jDetailsTable.setModel(detailsModel = new javax.swing.table.DefaultTableModel(
                tran,
                new String[]{
                    "Object field", "Description"
                }) {
                    static final long serialVersionUID = 240000008;

                    @Override
                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return columnIndex != 0;
                    }

                    @Override
                    public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
                        super.setValueAt(aValue, rowIndex, columnIndex);
                        isDetailsTableUpdated = true;
                    }
                });
    }

    private void initPropertiesOrderList(List<EntityProperty> fl) {
        fieldsListModel = new DefaultListModel();
        for (EntityProperty fl1 : fl) {
            fieldsListModel.addElement(fieldTypes[fl1.getType()] + " " + fl1.getName());
        }
        jOrderList.setModel(fieldsListModel);
    }

    private void applayUpdates() {
        int fieldsNumber = entity.getAllFields().size();

        if (isMappingTableUpdeted) {
            for (int i = 0; i < fieldsNumber; i++) {
                String mappingName = (String) mappingModel.getValueAt(i, 1);
                int size = 0;
                int prec = 0;
                if (!getValue(mappingModel, i, 3).isEmpty()) {
                    size = (Integer.parseInt(getValue(mappingModel, i, 3)));
                }
                if (!getValue(mappingModel, i, 4).isEmpty()) {
                    prec = (Integer.parseInt(getValue(mappingModel, i, 4)));
                }
                entity.getAllFields().get(i).setMapping(mappingName, size, prec);
            }
        }

        if (isDetailsTableUpdated) {
            for (int i = 0; i < fieldsNumber; i++) {
                String trans = (String) detailsModel.getValueAt(i, 1);
                entity.getAllFields().get(i).setDescription(trans);
            }
        }

        entity.setDescription(jDescriptionTextArea.getText());

        entity.setName(jNameTextField.getText());
    }

    public boolean isUpdated() {
        return updated;
    }

    private String getValue(DefaultTableModel model, int row, int col) {
        if (model.getValueAt(row, col) == null) {
            return "";
        }
        return model.getValueAt(row, col).toString();
    }
}
